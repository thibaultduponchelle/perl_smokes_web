#!/usr/bin/perl
use strict;
use Encode;
use SmokeReports::Config;
use SmokeReports::Dbh;
use Getopt::Long;


my $verbose;

GetOptions("v:i" => \$verbose);

my $config = SmokeReports::Config->config;

my $git_tree = $config->{commits}{git_tree}
  or die "config 'commits.git_tree' not defined\n";
-d $git_tree
  or die "config 'commits.git_tree' '$git_tree' is not a directory\n";
-d "$git_tree/.git"
  or die "$git_tree is not a git directory\n";

chdir $git_tree
  or die "Cannot chdir '$git_tree': $!\n";

my $dbh = SmokeReports::Dbh->dbh;

my %entries;

{
  print "loading existing\n" if $verbose;
  my $rows = $dbh->selectall_arrayref(<<SQL);
select sha, id, ordering, branch from git_commits
SQL
  for my $row (@$rows) {
    my ($sha, $id, $ordering, $branch) = @$row;
    $entries{$sha} = [ $id, $ordering, $branch ];
  }
}

my %current_branches;
{
  my $rows = $dbh->selectall_arrayref(<<SQL);
select branch, max(ordering)
from git_commits
group by branch
SQL
  for my $row (@$rows) {
    $current_branches{$row->[0]} = $row->[1];
  }
}

my @branches = grep /^\s*remotes\/origin\//, `git branch -a`;
chomp @branches;

s/^\s*remotes\/// for @branches;
s(^origin/)() for @branches;

@branches = grep /\A[a-zA-Z_\/0-9.+!-]+\z/, @branches;

my %branches = map { $_ => 1 } @branches;

my @queue = "blead";

delete @branches{@queue, "HEAD"};

push @queue, grep /^maint-5\.[0-9]+$/, sort keys %branches;
push @queue, grep m(^smoke-me/), sort keys %branches;

$verbose and print "queue: @queue\n";

BRANCH: for my $branch (@queue) {
  $verbose and print "$branch: ";

  my ($first) = `git log -n 1 --pretty="%H" origin/$branch`;
  chomp $first;

  if ($entries{$first}) {
    $verbose and print "seen HEAD\n";
    next BRANCH;
  }

  my @changes = `git log --pretty="%H %an: %s" origin/$branch`;
  chomp @changes;

  my $parentid = 0;
  my $order = $current_branches{$branch} || 0;
  $verbose and print " order $order ";
  my $added = 0;

  my @work;
  # look for a sha we've seen
  UNSEEN: for my $change (@changes) {
    my ($sha, $subject) = split / /, $change, 2;
    $subject = substr($subject, 0, 250) . "..."
	if length($subject) > 254;
    push @work, [ $sha, $subject ];

    $entries{$sha} and last UNSEEN;
  }

  for my $change (reverse @work) {
    my ($sha, $subject) = @$change;

    my $entry = $entries{$sha};

    if ($entry) {
      ($parentid, $order) = @$entry;
    }
    else {
      ++$order;
      my $tmp = decode("utf-8", $subject);
      $tmp and $subject = $tmp;

      $dbh->do(<<SQL, undef, $branch, $order, $parentid, $sha, $subject);
insert into git_commits(branch, ordering, parent_id, sha, subject)
                 values(?,      ?,        ?,         ?,   ?      )
SQL
      $parentid = $dbh->{mysql_insertid};
      $entries{$sha} = [ $parentid, $order ];
      ++$added;
    }
  }
  $verbose and print "$added records added\n";
}

my @current = @{$dbh->selectall_arrayref(<<SQL, { Slice => {} })};
select * from git_branches
SQL
my %current_name = map { $_->{name} => 1 } @current;

for my $branch (@queue) {
  unless ($current_name{$branch}) {
    $verbose and print "New branch $branch\n";
    $dbh->do(<<SQL, {}, $branch);
insert into git_branches(name) values(?)
SQL
  }
}
