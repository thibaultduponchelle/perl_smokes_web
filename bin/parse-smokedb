#!/usr/bin/perl
use strict;
use Getopt::Long;
use JSON;
use Digest::SHA qw(sha256_hex);
use POSIX qw(strftime);
my $verbose;
GetOptions("v|verbose" => \$verbose);
use SmokeReports::Dbh;
use SmokeReports::ParseSmokeDB qw(parse_smoke_report);

++$|;

my $schema = SmokeReports::Dbh->schema;
my $p5s = $schema->resultset("Perl5Smoke");
my $pr = $schema->resultset("ParsedReport");

my $query = $p5s->search
    (
     { 'parsed_report.smokedb_id' => undef },
     {
	 join => 'parsed_report',
	 order_by => "report_id",
     },
    );
my $total_count;
if ($verbose) {
    $total_count = $query->count;
    print "$total_count reports to process\n";
}

my @insert_cols = $pr->insert_columns;

my $done_count = 0;
my $json = JSON->new->utf8;
while (my $report = $query->next) {
    if ($verbose) {
	print "$done_count / $total_count\r";
    }

    #print $report->{report_id}, "\n";
    my %result =
	(
	 #( map { $_ => '' } @insert_cols ),
	 error => '',
	 smokedb_id => $report->report_id,
	 cpu_count => 0,
	 branch => undef,
	);
    my $parsed;
    if (eval { $parsed = $json->decode($report->raw_report); 1 }) {
	unless (eval { process_report(\%result, $parsed, $report->fetched_at); 1 }) {
	    $result{error} = $@;
	}
    }
    else {
	$result{error} = "Could not parse json: " . $@;
    }

    my %ins;
    @ins{@insert_cols} = @result{@insert_cols};
    $pr->create(\%ins);

    ++$done_count;
}

sub process_report {
  my ($result, $report, $fetched_at) = @_;

  parse_smoke_report($result, $report);

  $result->{when_at} = strftime "%Y-%m-%d %H:%M:%S", gmtime $fetched_at;
}
